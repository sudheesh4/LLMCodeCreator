[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nHere is an example:\n\nhello_world.py\n```python\nprint(\"hello world!\")\n```\nUseful to know:\nYou almost always put different classes in different files.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nYou always add a comment briefly describing the purpose of the function definition.\nYou try to add comments explaining very complex bits of logic.\nYou always follow the best practices for the requested languages in terms of describing the code written as a defined\npackage/project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"}, {"role": "user", "content": "We are making a small website to display some text and images. Use HTML,JS and CSS."}, {"role": "assistant", "content": "- Clarify areas: \n  - What kind of text and images should be displayed?\n  - Is there any specific layout or design required?\n  - How will the website be accessed (web browser, mobile app, etc)?\n  - Do you have a preferred color scheme or font style?\n- Pick one question:\n- Clarify the color scheme"}, {"role": "user", "content": "Make your own assumptions and state them explicitly before starting"}, {"role": "assistant", "content": "- Assumption 1: The text and images should be related to a specific topic or theme.\n- Assumption 2: A simple and responsive layout with a white background and light font will be used."}, {"role": "user", "content": "Please now remember the steps:\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nPlease note that the code should be fully functional. No placeholders.\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. The code should be fully functional. Make sure that code in different files are compatible with each other.\nBefore you finish, double check that all parts of the architecture is present in the files.\n"}, {"role": "assistant", "content": "- home.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My Website</title>\n    <!-- import CSS stylesheet -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <!-- display text and images according to the theme -->\n    <h1>Hello, world!</h1>\n    <img src=\"image1.jpg\" alt=\"Image 1\">\n    <p id=\"description\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    <!-- add a scrollable container for the content -->\n    <div class=\"container\">\n      <ul id=\"gallery\">\n        <!-- loop through the images and display them with captions -->\n        <li><img src=\"image2.jpg\" alt=\"Image 2\">\n          <p>Image 2</p>\n        </li>\n        <li><img src=\"image3.jpg\" alt=\"Image 3\">\n          <p>Image 3</p>\n        </li>\n        <!-- add more li elements with img and p tags -->\n      </ul>\n    </div>\n    <!-- add a script tag to load the CSS and handle the scroll event -->\n    <script src=\"script.js\"></script>\n    <script>\n      // get the container element\n      const container = document.querySelector(\".container\");\n      // get the gallery ul element\n      const gallery = document.getElementById(\"gallery\");\n      // set a maximum height for the container\n      container.style.maxHeight = \"500px\";\n      // add an event listener to the scroll wheel or touch\n      container.addEventListener(\"wheel\", () => {\n        // calculate the current scroll position\n        const scrollPosition = container.scrollTop;\n        // update the gallery's left property based on the scroll position\n        gallery.style.transform = `translateX(${scrollPosition}px)`;\n      });\n    </script>\n  </body>\n</html>\n```\n- style.css\n```css\n/* set the font family and size, and text alignment */\nbody {\n  font-family: Arial, sans-serif;\n  font-size: 16px;\n  text-align: justify;\n}\n\n/* set the background color and box model for the container */\n.container {\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  margin: 20px;\n  padding: 20px;\n  width: 80%;\n}\n\n/* set the display, flex, and margin properties for the gallery */\n#gallery {\n  display: flex;\n  margin: 0;\n}\n\n/* set the aspect ratio, width, height, and object-fit property for the images */\nimg {\n  aspect-ratio: 16 / 9;\n  width: 80%;\n  max-height: 350px;\n  object-fit: cover;\n}\n\n/* set the padding, border, and color properties for the captions */\np {\n  padding: 10px;\n  border: 2px solid #333;\n  color: #333;\n}\n\n/* add a hover effect to the images by changing their opacity */\nimg:hover {\n  opacity: 0.8;\n}\n\n/* set the width, margin, and padding properties for the scroll bar */\n::-webkit-scrollbar {\n  width: 8px;\n  background-color: #f0f0f0;\n}\n\n/* set the border, width, and color properties for the scroll bar thumb */\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  border: 2px solid #333;\n  width: 20px;\n  background-color: #f0f0f0;\n}\n```\n- script.js\n```javascript\n// get the container element\nconst container = document.querySelector(\".container\");\n// get the gallery ul element\nconst gallery = document.getElementById(\"gallery\");\n// set a maximum height for the container\ncontainer.style.maxHeight = \"500px\";\n// add an event listener to the scroll wheel or touch\ncontainer.addEventListener(\"wheel\", () => {\n  // calculate the current scroll position\n  const scrollPosition = container.scrollTop;\n  // update the gallery's left property based on the scroll position\n  gallery.style.transform = `translateX(${scrollPosition}px)`;\n});\n```"}]